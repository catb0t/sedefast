#! sidef -Wk
#`(exit the shell) {
  eval 'exec sidef -Wk $0 ${1+"$@"}'
}

##  Luciu, mini test framework for Sidef
##    Copyright Cat Stevens 2018
##  You should have recieved a copy of either the
##    Artistic License 2.0 or GPLv3 with this program;
##    if not, see <https://github.com/catb0t/sedefactor>

subset State < String { %w(completed crashed empty).contains(_) }
subset Result < String { %w(failed passed skipped).contains(_) }
subset ExpressionResult < String { %w(fail pass).contains(_) }
module Expression { define FAIL = :fail; define PASS = :pass }

class Reason {
  has String _func_name
  has Hash _called_with
  has Hash _special_parameters

  has ExpressionResult _result
  has String _explain
  has Object _caused_by

  has Bool _lck

  -> lock   { self._lck = true;  nil }
  -> unlock { self._lck = false; nil }

  -> func_name () is cached -> String { self._func_name }
  -> func_name (String fn)  -> Reason { if (!self._lck) { self._func_name = fn } self }

  -> called_with () is cached -> Hash { self._called_with }
  -> called_with (Hash cw)    -> Reason { if (!self._lck) { self._called_with = cw } self }

  -> special_parameters () is cached -> Hash { self._special_parameters }
  -> special_parameters (Hash sp)    -> Reason { if (!self._lck) { self._special_parameters = sp } self }

  -> result () is cached -> String { self._result }
  -> result (er < ExpressionResult) -> Reason { if (!self._lck) { self._result = er } self }

  -> explain () is cached -> String { self._explain }
  -> explain (String ex)  -> Reason { if (!self._lck) { self._explain = ex } self }

  -> caused_by () is cached -> Object { self._caused_by }
  -> caused_by (Object cb)  -> Reason { if (!self._lck) { self._caused_by = cb } self }
}

# how glossy is your Sidef?
class Luciu (String case_name) {

  has Array reasons = []
  has State  _state
  has Result _result
  -> state (s < State)   -> Luciu { self._state = s; self }
  -> result (r < Result) -> Luciu { self._result = r; self }
  -> state { self._state }
  -> result { self._result }

  has Number failed_exprs = 0
  has Number passed_exprs = 0
  has Pair crash_info
  has _su_fun = Pair({}, [])
  has _td_fun = Pair({}, [])
  -> setup    (b, *a) { self._su_fun = Pair(b, a); self }
  -> teardown (b, *a) { self._td_fun = Pair(b, a); self }

  has Bool _skip_on_crash
  -> skip_crash { self._skip_on_crash = true; self }
  has Bool _skip_called
  -> skip_called () -> Luciu { self._skip_called = true; self }

  has Bool _stopped
  -> stopped () -> Luciu { self._stopped = true; self }

  has data_store # for storing data between su/call/td

  has padding = 7

  method _generate_is (test_like = true) {
    -> returned_func (*args) {
      self._su_fun[0](self._su_fun[1]...)
      var reason = Reason() \
        .func_name(__METHOD_NAME__) \
        .called_with( :(:args => args) ) \
        .special_parameters( :(:test_like => test_like) )

      var conjugate_test_like = (test_like ? "equality" : "inequality")

      # no arguments = pass (?)
      given (args.len) {
        when (0) {
          reason.result(Expression::PASS).explain("empty arguments").lock
          goto reason.result
        }
        when (1) {
          reason.caused_by(args[0]).explain("#{test_like} expression")
          if (test_like == Bool(args[0])) {
            reason.result(Expression::PASS).lock
          } else {
            reason.result(Expression::FAIL).lock
          }
          goto reason.result
        }
        default {
          args.combinations(2).each {
            var (first, second) = _...
            if (test_like != (first == second)) {
              var p = (test_like ? "in" : "")
              reason.result(Expression::FAIL).caused_by([first, second]).explain("found #{p}equal arguments").lock
              goto reason.result
            }
          }
          var p = (test_like ? "" : "in")
          reason.result(Expression::PASS).caused_by(args).explain("all #{p}equal arguments").lock
          goto reason.result
        }
      }
      die "#{__CLASS_NAME__}.#{__METHOD_NAME__}: how did we get here?"

      # TODO fix text alignment
      @:pass
        say "\tPASS\t#{conjugate_test_like}\t#{args.dump}"
        goto :end
      @:fail
        say "\tFAIL\t#{conjugate_test_like}\t#{args.dump}"
      @:end
        self._td_fun[0](reason, self._td_fun[1]...)
        self.reasons.append(reason)
        return reason
    }
  }

  method _dies (block, regexes = [//, //], *args) {
    self._su_fun[0](self._su_fun[1]...)
    var reason = Reason() \
      .func_name(__METHOD_NAME__) \
      .called_with( :(:block => block, :regexes => regexes, :args => args) ) \
      .caused_by([block, args])

    try {
      block.run(args...)
      reason.result(Expression::FAIL).explain("no error caught").lock
      goto :no_exc
    } catch {
        |type, msg|
      if (type~~regexes[0] && msg~~regexes[1]) {
        reason.result(Expression::PASS).explain("expected error caught").lock
        goto :expected_exc
      }
      reason.result(Expression::FAIL).explain("unexpected error caught").lock
      goto :unexpected_exc
    }
    die "#{__CLASS_NAME__}.#{__METHOD_NAME__}: how did we get here?"

    @:expected_exc
      say "\tPASS\tdies\t\t[native code]"
      goto :end
    @:unexpected_exc
      say "\tFAIL\tdies\t\t[native code]\n\t\t(error mismatch)"
      goto :end
    @:no_exc
      say "\tFAIL\tdies\t\t[native code]\n\t\t(nothing caught)"
    @:end
      self._td_fun[0](reason, self._td_fun[1]...)
      self.reasons.append(reason)
      return reason
  }

  method _lives (block, *args) {
    self._su_fun[0](self._su_fun[1]...)
    var reason = Reason() \
      .func_name(__METHOD_NAME__) \
      .called_with( :(:block => block, :args => args) )

    try {
      block.run(args...)
      reason.result(Expression::PASS).caused_by([block, args]).explain("no error caught").lock
      goto reason.result
    } catch {
        |type, msg|
      reason.result(Expression::FAIL).caused_by([block, args, type, msg]).explain("error caught") \
        .special_parameters( Hash(:type => type, :msg => msg) ).lock
      goto reason.result
    }
    die "#{__CLASS_NAME__}.#{__METHOD_NAME__}: how did we get here?"

    @:pass
      say "\tPASS\tlives\t\t[native code]"
      goto :end
    @:fail
      say "\tFAIL\tlives\t\t[native code]"
    @:end
      self._td_fun[0](reason, self._td_fun[1]...)
      self.reasons.append(reason)
      return reason
  }

  method _generate_says (test_like = true) {
    -> returned_func (block, test_exp) {
      self._su_fun[0](self._su_fun[1]...)
      var reason = Reason() \
        .func_name(__METHOD_NAME__) \
        .called_with( :(:block => block, :test_exp) ) \

      var output = block.capture()
      reason.caused_by([output, test_exp])
      if (test_like == (output ~~ test_exp)) {
        reason.result(Expression::PASS).explain("block matches expression").lock
      } else {
        reason.result(Expression::FAIL).explain("block doesn't match expression").lock
      }
      goto reason.result

      @:pass
        say "\tPASS\tsays\t\t'#{[output[0..8]].join()}...' ~~ '#{[test_exp.to_s[0..8]].join()}...'"
        goto :end
      @:fail
        say "\tFAIL\tsays\t\t'#{[output[0..8]].join()}...' ~~ '#{[test_exp.to_s[0..8]].join()}...'"
      @:end
        self._td_fun[0](reason, self._td_fun[1]...)
        self.reasons.append(reason)
        return reason
    }
  }

  method _skip (*args) {
    args
    self.skip_called
    # ???
    die "STOPITERATION:SKIP"
  }

  method stop (*args) {
    args
    self.stopped
    # ???
    die "STOPITERATION:STOP"
  }

  method summary {
    if (self._state != :completed) {
      var text = if (self._state == :crashed) {
        Pair("CRASH", "unexpected die / assert / warn")
      } else {
        Pair("EMPTY", "devoid of expressions (without calling skip())")
      }
      ("%*s %s\n").printf(self.padding, text...)
    }
    ("%*s Case '%s'\n").printf(self.padding, String(self._result[^4]).uc, self.case_name)
    if (self._state == :crashed) {
      ("%*s crash -> %s\n").printf(self.padding, "", self.crash_info.dump)
    } elsif (self._result == :failed) {
      if (self._state != :empty) {
        ("%*s failed -> %s\n").printf(self.padding, self.failed_exprs.len, self.failed_exprs.dump)
      } else {
        ("%*s failed -> %s\n").printf(self.padding, 1, "case has no expressions and doesn't call skip()")
      }
    }
    say()
  }

  method :(block) {
    say "   TEST Case '#{self.case_name}'..."
    var (State prelim_state, Result prelim_result)
    try {
      block.run(
        self._generate_is(true),        # is
        self._generate_is(false),       # isnt
        self.method("_dies"),           # dies
        self.method("_lives"),          # lives
        self.method("_skip"),           # skip
        self._generate_says(true),      # says
        self.method("stop"),            # stop
        self                            # self
      )
      prelim_state = (self.reasons.len ? :completed : :empty)

      prelim_result = if (self._skip_called) {
        :skipped
      } elsif (!self._skip_called && prelim_state==:empty) { #
        :failed
      } else {
        :passed
      }

    } catch {
        |type, msg|
        # TODO: allow configuration of whether warn() is recorded as a crash

      # this is not a real exception, this is what we threw
      # in order to implement skip
      if (msg ~~ /STOPITERATION:SKIP/) {
        # these are just hard facts
        prelim_state = :completed
        prelim_result = :skipped
      } elsif (msg ~~ /STOPITERATION:STOP/) {
        # it doesn't matter whether this dies or exits
        die msg
      } else {
        ("%*s '#{type}': '#{msg}'\n").printf(7, "OOPS")
        prelim_state = :crashed
        prelim_result = (self._skip_on_crash ? :skipped : :failed)
        self.crash_info = Pair(type, msg)

        # 'reason' is nil here
        # teardown_function can check that and become a crash handler
        self._td_fun[0](nil, self._td_fun[1]...)
      }
    }

    -> result_fight (a < Result, b < Result) { # combine results to find the winner
      # prelim_result = failed when the case is empty without skip, or on unskipped crash
      # prelim_result = failed wins in every comparison against a later value
      # similarly, prelim_result = skipped is a hard fact and shouldn't be overridden
      if ( %w(failed skipped).contains(a) ) { a }
      # otherwise b wins, since prelim_result can't say for sure if it really passed
      elsif (a==:passed && b!=:passed) { b }
      elsif ( [a, b] == %w(passed passed) ) { :passed }
      else { die "result_fight missing case for: prelim=#{a}, later=#{b}" }
    }

    var (
      passed_reasons = self.reasons.grep{ .result == Expression::PASS },
      failed_reasons = self.reasons.grep{ .result == Expression::FAIL }
    )

    var later_result = if (failed_reasons.len) {
      :failed
    } elsif (!failed_reasons.len && passed_reasons==self.reasons) {
      :passed
    }

    self.state(prelim_state)
    self.result( result_fight(prelim_result, later_result) )

    self.failed_exprs = failed_reasons
    self.passed_exprs = passed_reasons

    self.summary

    self # most important line, without this there is no Luciu
  }
}

-> ec (x) { eval(x) }

class Case < Luciu {}

class Group (name, source) {
  # handle stop from sub-cases
  # provide type-checked getters / setters
  has Array cases = []
  has empty_file = false
  # has State group_state
  has Result _group_result
  -> group_result () -> String { self._group_result }
  -> group_result (gr < Result) -> Group { self._group_result = gr; self }
  method go () {

    var cases = ec(self.source)
    if (! defined(cases)) {
      self.empty_file = true
      self.group_result(:skipped)
      return self
    } elsif ( cases.any{ ._stopped } ) {
      die "STOPITERATION:STOP"
    }
    # hmmm
    # self.source = nil

    self.cases = cases

    var (
      failed_cases = cases.grep{ .result == :failed },
      passed_cases = cases.grep{ .result == :passed }
    )

    self.group_result(if (failed_cases.len) {
      :failed
    } elsif (cases==[] || (!failed_cases.len && passed_cases==cases)) {
      :passed
    })

    # output = eval( file_contents )
    # if (defined(output) && !output.len) { empty_files++ }
    # elsif ((!defined(output)) && (!file_contents)) { empty_files++; output = [] }
    # run_tests.append(output)
    #
    # var sum = if (output.any{ .crashed }) { "CRASH!"
    # } elsif (output.any{ .empty }) { "EMPTY!"
    # } elsif (output.any{ .failed }) { "FAIL"
    # } elsif (output.all{ .passed }) { "PASS"
    # } elsif (!output) { "EMPTY!" }

    self
  }
}

struct Config {
  String require_version = "0",

  Hash dir_like = Hash(
    "ignore" => [],
    "do" => [],
  ),
  Hash file_like = Hash(
    "ignore" => [],
    "do" => []
  ),
  Hash skip = Hash(
    "exact" => [],
    "like" => [],
    "empty_like" => false,
    "always" => false
  ),
  Hash ignore_crash = Hash(
    "exact" => [],
    "like" => [],
    "always" => false,
    # ignore warning as a crash?
    "warning" => false,
  ),
}

# test-generator based on input / expectation specification
# this kind of thing is really useless in some contexts, let's see
class Meter {}

# make this function into an API
func main {
  say "How glossy is your Sidef?\n"

  # very simple for now, no config
  var test_dirs = ARGV.map{ Dir(_) }
  var run_groups = []
  # var empty_filenames = []
  for dir in (test_dirs) {
    say "Opening '#{dir}'..."

    for entry in (dir.open_r) {

      if ((entry =~ /^([^._].+\.st)$/)[0]) { # tests starting with _ or . are ignored
        # try {} catch { |type, msg| type, msg; output = []; say "#{type}: #{msg}" }
          |name|
        say " Testing cases in '#{dir+name}'..."
        var file_contents = (dir+File(name)->open_r.slurp)
        var c = Config()
        c
        var g = Group(dir+File(name), file_contents)
        # need to properly handle Empty+Passed (file has empty [])
        # and Empty+Skipped (file has no [], which causes res==nil)
        # Empty+Failed is only valid for cases and handled in Luciu
        try {
          g.go
        } catch {
            |_, msg|
          if (msg ~~ /STOPITERATION:STOP/) {
            say "\t!! Stopped!"
            Sys.exit(2)
          }
        }
        run_groups.append(g)
        say " Tested '#{dir+name}'"
      }
    }

    say "Finished '#{dir}'."
  }

  ## run_tests is Array<Array<Test>>
  # the first level is files / groups
  # then cases
  # then exprs
  # say run_groups

  var (
    total_groups = run_groups.len,
    passing_groups = Set(run_groups.grep{ .group_result == :passed }...),
    failing_groups = Set(run_groups.grep{ .group_result == :failed }...), # note the any
    skipping_groups = Set(run_groups.grep{ .group_result == :skipped }...),

    # a group is only crashed when all of its cases are crashed
    completed_groups = Set(run_groups.grep{ .cases.any{ .state == :completed } }...),
    crashed_groups = Set(run_groups.grep{ .cases.all{ .state == :crashed } }...),
    empty_groups = run_groups.grep{ .cases.len == 0 && ! .empty_file }, # currently this searches for [] which is correct
    empty_file_groups = run_groups.grep{ .empty_file },

    cases = run_groups.map{ .cases... },
    total_cases = cases.len,
    passing_cases = Set(cases.grep{ .result == :passed }...),
    failing_cases = Set(cases.grep{ .result == :failed }...),
    skipping_cases = Set(cases.grep{ .result == :skipped }...),

    completed_cases = Set(cases.grep{ .state == :completed }...),
    crashed_cases = Set(cases.grep{ .state == :crashed }...),
    empty_cases = Set(cases.grep{ .state == :empty }...),

    # exprs = cases.map{ _.reasons }
    total_exprs = cases.map{ .reasons.len }.sum,
    failing_exprs = cases.map{ .failed_exprs.len }.sum,
    passing_exprs = cases.map{ .passed_exprs.len }.sum,
  )

  func t (Array a) {
    var b = a.map{.to_a.grep{_}.len}
    "#{b[0]} #{b[1]}"
  }

  func f (Array a) {
    var b = a.map{.to_a.grep{_}.len}
    b[2] = a[2]
    "#{b[0]} #{b[1]} #{b[2]}"
  }

  var (
    failing_completed = [failing_groups & completed_groups, failing_cases & completed_cases, failing_exprs],
    failing_crashed   = [failing_groups & crashed_groups, failing_cases & crashed_cases],
    failing_empty     = [failing_groups & empty_groups, failing_cases & empty_cases],

    passing_completed = [passing_groups & completed_groups, passing_cases & completed_cases, passing_exprs],
    passing_empty     = [passing_groups & empty_groups, passing_cases & empty_cases],

    skipping_completed = [skipping_groups & completed_groups, skipping_cases & completed_cases],
    skipping_crashed   = [skipping_groups & crashed_groups, skipping_cases & crashed_cases],
    skipping_empty     = [skipping_groups & empty_file_groups, skipping_cases & empty_cases],
  )

  var (Table, using_table = false)
  try {
    Table = ("Text::Table").require
    using_table = true
  } catch {
      |t, msg|
    if (! (msg.lc ~~ /can't locate/)) {
      die "#{t}! :: #{msg}"
    }
  }

  var (gs = ("s" if total_groups!=1), cs = ("s" if total_cases!=1), es = ("s" total_exprs!=1))

  if (using_table) {
    say()
    var tb = Table.new("Planned", "#{total_groups} Group#{gs}", "#{total_cases} Case#{cs}", "#{total_exprs} Expr#{es}")
    tb.load(
      [ " ", " ", " ", " " ],
      [ "", "Completed", "Crashed", "Empty" ],
      ["Passing", f(passing_completed), "", t(passing_empty)],
      ["Failing", f(failing_completed), t(failing_crashed), t(failing_empty)]
      ["Skipping", t(skipping_completed), t(skipping_crashed), t(skipping_empty)]
      ["", "G C E", "G C", "G C"]
    )
    say tb.stringify

  } else {
    say "\nPlanned\t#{total_groups} Group#{gs}, #{total_cases} Case#{cs}, #{total_exprs} Expr#{es}\n"
    say "\n        Compl.\tCrash\tEmpty"
    say "Passed\t#{f(passing_completed)}\t----- \t#{t(passing_empty)}"
    say "Failed\t#{f(failing_completed)}\t#{t(failing_crashed)} \t#{t(failing_empty)}"
    say "Skipped\t#{t(skipping_completed)}\t#{t(skipping_crashed)} \t#{t(skipping_empty)}"
    say "\tG C E\tG C\tG C"
  }

  if ((passing_groups | skipping_groups)==completed_groups && total_exprs!=0) {
    say "Found jewel-quality Sidef."
  }
}

if (__FILE__ == __MAIN__) {
  main()
}
